-- Code generated by the MiniLucid Compiler
open Complex
open Print
machine complex_add =
  step(i1: Complex.complex, i2: Complex.complex)
  returns (o: Complex.complex) {
    var v_1: float; v: float;
    v_1 = ((+.) i1.im i2.im);
    v = ((+.) i1.re i2.re);
    o = {Complex.re = v;
         Complex.im = v_1}
  }

machine twid =
  step(i1: Complex.complex, i2: Complex.complex, tw: Complex.complex)
  returns (o: Complex.complex) {
    var v_8: float; v_7: float; v_6: float; v_5: float; v_4: float;
        v_3: float; v_2: float; v: float; tmp: Complex.complex;
    v_2 = ((-.) i1.im i2.im);
    v = ((-.) i1.re i2.re);
    tmp = {Complex.re = v;
           Complex.im = v_2};
    v_7 = ((*.) tmp.im tw.re);
    v_6 = ((*.) tmp.re tw.im);
    v_8 = ((+.) v_6 v_7);
    v_4 = ((*.) tmp.im tw.im);
    v_3 = ((*.) tmp.re tw.re);
    v_5 = ((-.) v_3 v_4);
    o = {Complex.re = v_5;
         Complex.im = v_8}
  }

machine bf =
  obj n_11 : twid[n];n_9 : complex_add[n];
  
  step(i1: Complex.complex^n, i2: Complex.complex^n)
  returns (o1: Complex.complex^n, o2: Complex.complex^n) {
    var v: Complex.complex^((((2 * n) - 1) - n) + 1);
    for i_16: int = 0 to (1 + (((2 * n) - 1) - n)) {
       v[i_16] = Complex.twiddle[((+) i_16 n)] 
    };
    for i_15: int = 0 to n {
       (o2[i_15]) = n_11[i_15].step(i1[i_15], i2[i_15], v[i_15]) 
    };
    for i: int = 0 to n {
       (o1[i]) = n_9[i].step(i1[i], i2[i]) 
    }
  }

machine print_vector =
  var v: int;
  obj n_14 : Print.print_complex;
  
  step(i: Complex.complex^n) returns () {
    var v_9: Complex.complex; k: int;
    k = ((+) mem(v) 1);
    v_9 = i[(between k n)];
    n_14.step(v_9);
    mem(v) = k
  }

  reset() returns () {
    mem(v) = 0
  }

machine fft_aux2 =
  obj n_18 : bf<<1>>;
  
  step(i: Complex.complex^2) returns (out: Complex.complex^2) {
    var v_10: Complex.complex; v: Complex.complex; i1: Complex.complex^1;
        i2: Complex.complex^1; o1: Complex.complex^1; o2: Complex.complex^1;
    v_10 = i[1];
    i2 = [v_10];
    v = i[0];
    i1 = [v];
    (o1,o2) = n_18.step(i1, i2);
    for i_13: int = 0 to 1 {
       out[i_13] = o1[i_13] 
    };
    for i_14: int = 0 to 1 {
       out[((+) 1 i_14)] = o2[i_14] 
    }
  }

machine fft_aux4 =
  obj n_21 : bf<<2>>;
  
  step(i: Complex.complex^4) returns (out: Complex.complex^4) {
    var i1: Complex.complex^2; i2: Complex.complex^2; o1: Complex.complex^2;
        o2: Complex.complex^2;
    for i_12: int = 0 to (1 + (3 - 2)) {
       i2[i_12] = i[((+) i_12 2)] 
    };
    for i_11: int = 0 to (1 + (1 - 0)) {
       i1[i_11] = i[((+) i_11 0)] 
    };
    (o1,o2) = n_21.step(i1, i2);
    for i_9: int = 0 to 2 {
       out[i_9] = o1[i_9] 
    };
    for i_10: int = 0 to 2 {
       out[((+) 2 i_10)] = o2[i_10] 
    }
  }

machine fft_aux8 =
  obj n_24 : bf<<4>>;
  
  step(i: Complex.complex^8) returns (out: Complex.complex^8) {
    var i1: Complex.complex^4; i2: Complex.complex^4; o1: Complex.complex^4;
        o2: Complex.complex^4;
    for i_8: int = 0 to (1 + (7 - 4)) {
       i2[i_8] = i[((+) i_8 4)] 
    };
    for i_7: int = 0 to (1 + (3 - 0)) {
       i1[i_7] = i[((+) i_7 0)] 
    };
    (o1,o2) = n_24.step(i1, i2);
    for i_5: int = 0 to 4 {
       out[i_5] = o1[i_5] 
    };
    for i_6: int = 0 to 4 {
       out[((+) 4 i_6)] = o2[i_6] 
    }
  }

machine fft_aux16 =
  obj n_27 : bf<<8>>;
  
  step(i: Complex.complex^16) returns (out: Complex.complex^16) {
    var i1: Complex.complex^8; i2: Complex.complex^8; o1: Complex.complex^8;
        o2: Complex.complex^8;
    for i_4: int = 0 to (1 + (15 - 8)) {
       i2[i_4] = i[((+) i_4 8)] 
    };
    for i_3: int = 0 to (1 + (7 - 0)) {
       i1[i_3] = i[((+) i_3 0)] 
    };
    (o1,o2) = n_27.step(i1, i2);
    for i_1: int = 0 to 8 {
       out[i_1] = o1[i_1] 
    };
    for i_2: int = 0 to 8 {
       out[((+) 8 i_2)] = o2[i_2] 
    }
  }

machine main =
  obj n : fft_aux8;
  
  step() returns () {
    var fft8: Complex.complex^8; result: Complex.complex^8;
    fft8 = [{ Complex.re = 1.000000; Complex.im = 0.000000 },
             { Complex.re = 0.000000; Complex.im = 0.000000 },
             { Complex.re = 0.000000; Complex.im = 0.000000 },
             { Complex.re = 0.000000; Complex.im = 0.000000 },
             { Complex.re = 0.000000; Complex.im = 0.000000 },
             { Complex.re = 0.000000; Complex.im = 0.000000 },
             { Complex.re = 0.000000; Complex.im = 0.000000 },
             { Complex.re = 0.000000; Complex.im = 0.000000 }];
    (result) = n.step(fft8)
  }


