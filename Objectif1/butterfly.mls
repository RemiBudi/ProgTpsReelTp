open Typecomplex
open Print
open Twiddle
open Fftc
open Scan
node complex_add(i1 : Typecomplex.complex; i2 : Typecomplex.complex)
returns (o : Typecomplex.complex)
var v : float; v_1 : float;
let
   nonpreemptive   v = (i1.Typecomplex.re +. i2.Typecomplex.re);
   nonpreemptive   v_1 = (i1.Typecomplex.im +. i2.Typecomplex.im);
   nonpreemptive   o = { Typecomplex.re = v; Typecomplex.im = v_1 }
tel

node twid(i1 : Typecomplex.complex; i2 : Typecomplex.complex;
           tw : Typecomplex.complex)
returns (o : Typecomplex.complex)
var tmp : Typecomplex.complex; v : float; v_2 : float; v_3 : float;
    v_4 : float; v_5 : float; v_6 : float; v_7 : float; v_8 : float;
let
   nonpreemptive   v = (i1.Typecomplex.re -. i2.Typecomplex.re);
   nonpreemptive   v_2 = (i1.Typecomplex.im -. i2.Typecomplex.im);
   nonpreemptive   tmp = { Typecomplex.re = v; Typecomplex.im = v_2 };
   nonpreemptive   v_3 = (tmp.Typecomplex.re *. tw.Typecomplex.re);
   nonpreemptive   v_4 = (tmp.Typecomplex.im *. tw.Typecomplex.im);
   nonpreemptive   v_5 = (v_3 -. v_4);
   nonpreemptive   v_6 = (tmp.Typecomplex.re *. tw.Typecomplex.im);
   nonpreemptive   v_7 = (tmp.Typecomplex.im *. tw.Typecomplex.re);
   nonpreemptive   v_8 = (v_6 +. v_7);
   nonpreemptive   o = { Typecomplex.re = v_5; Typecomplex.im = v_8 }
tel

node norm<<n:float>>(i : Typecomplex.complex)
returns (o : Typecomplex.complex)
var v : float; v_9 : float;
let
   nonpreemptive   v = (i.Typecomplex.re /. n);
   nonpreemptive   v_9 = (i.Typecomplex.im /. n);
   nonpreemptive   o = { Typecomplex.re = v; Typecomplex.im = v_9 }
tel

node bf<<n:int>>(i1 : Typecomplex.complex^n; i2 : Typecomplex.complex^n)
returns (o1 : Typecomplex.complex^n; o2 : Typecomplex.complex^n)
var v : Typecomplex.complex^((((2 * n) - 1) - n) + 1);
let
   nonpreemptive   o1 = (map (complex_add())<<n>>)(())(i1, i2);
   nonpreemptive   v = Twiddle.twiddle[n..((2 * n) - 1)];
   nonpreemptive   o2 = (map (twid())<<n>>)(())(i1, i2, v)
tel

node fft_aux2(i : Typecomplex.complex^2)
returns (out : Typecomplex.complex^2)
var o2 : Typecomplex.complex^1; o1 : Typecomplex.complex^1;
    i2 : Typecomplex.complex^1; i1 : Typecomplex.complex^1;
    v : Typecomplex.complex; v_10 : Typecomplex.complex;
let
   nonpreemptive   v = i[0];
   nonpreemptive   i1 = [v];
   nonpreemptive   v_10 = i[1];
   nonpreemptive   i2 = [v_10];
   nonpreemptive   (o1, o2) = bf<<1>>(i1, i2);
   nonpreemptive   out = o1 @ o2
tel

node fft_aux4(i : Typecomplex.complex^4)
returns (out : Typecomplex.complex^4)
var tmp2 : Typecomplex.complex^2; tmp1 : Typecomplex.complex^2;
    o2 : Typecomplex.complex^2; o1 : Typecomplex.complex^2;
    i2 : Typecomplex.complex^2; i1 : Typecomplex.complex^2;
let
   nonpreemptive   i1 = i[0..1];
   nonpreemptive   i2 = i[2..3];
   nonpreemptive   (tmp1, tmp2) = bf<<2>>(i1, i2);
   nonpreemptive   o1 = fft_aux2(tmp1);
   nonpreemptive   o2 = fft_aux2(tmp2);
   nonpreemptive   out = o1 @ o2
tel

node fft_aux8(i : Typecomplex.complex^8)
returns (out : Typecomplex.complex^8)
var tmp2 : Typecomplex.complex^4; tmp1 : Typecomplex.complex^4;
    o2 : Typecomplex.complex^4; o1 : Typecomplex.complex^4;
    i2 : Typecomplex.complex^4; i1 : Typecomplex.complex^4;
let
   nonpreemptive   i1 = i[0..3];
   nonpreemptive   i2 = i[4..7];
   nonpreemptive   (tmp1, tmp2) = bf<<4>>(i1, i2);
   nonpreemptive   o1 = fft_aux4(tmp1);
   nonpreemptive   o2 = fft_aux4(tmp2);
   nonpreemptive   out = o1 @ o2
tel

node fft_aux16(i : Typecomplex.complex^16)
returns (out : Typecomplex.complex^16)
var tmp2 : Typecomplex.complex^8; tmp1 : Typecomplex.complex^8;
    o2 : Typecomplex.complex^8; o1 : Typecomplex.complex^8;
    i2 : Typecomplex.complex^8; i1 : Typecomplex.complex^8;
let
   nonpreemptive   i1 = i[0..7];
   nonpreemptive   i2 = i[8..15];
   nonpreemptive   (tmp1, tmp2) = bf<<8>>(i1, i2);
   nonpreemptive   o1 = fft_aux8(tmp1);
   nonpreemptive   o2 = fft_aux8(tmp2);
   nonpreemptive   out = o1 @ o2
tel

node fft8(i : Typecomplex.complex^8) returns (o : Typecomplex.complex^8)
var norma : Typecomplex.complex^8; tmp : Typecomplex.complex^8;
let
   nonpreemptive   tmp = fft_aux8(i);
   nonpreemptive   norma = (map (norm<<8.000000>>())<<8>>)(())(tmp);
   nonpreemptive   o = Fftc.bitrev8(norma);
   nonpreemptive   () = Print.printVector8(o)
tel

node fft16(i : Typecomplex.complex^16) returns (o : Typecomplex.complex^16)
var norma : Typecomplex.complex^16; tmp : Typecomplex.complex^16;
let
   nonpreemptive   tmp = fft_aux16(i);
   nonpreemptive   norma = (map (norm<<16.000000>>())<<16>>)(())(tmp);
   nonpreemptive   o = Fftc.bitrev16(norma);
   nonpreemptive   () = Print.printVector16(o)
tel

node main returns 
var result16 : Typecomplex.complex^16; result8 : Typecomplex.complex^8;
    n : int; fftVect16 : Typecomplex.complex^16;
    fftVect8 : Typecomplex.complex^8; ck : bool;
    fftVect8_true : Typecomplex.complex^8;
    fftVect16_true : Typecomplex.complex^16;
    result8_true : Typecomplex.complex^8;
    result16_true : Typecomplex.complex^16;
    fftVect8_false : Typecomplex.complex^8;
    fftVect16_false : Typecomplex.complex^16;
    result8_false : Typecomplex.complex^8;
    result16_false : Typecomplex.complex^16;
let
   nonpreemptive   n = Scan.scanSize();
   nonpreemptive   result16 =
    merge ck (false -> result16_false)(true -> result16_true);
   nonpreemptive   result8 =
    merge ck (false -> result8_false)(true -> result8_true);
   nonpreemptive   fftVect16 =
    merge ck (false -> fftVect16_false)(true -> fftVect16_true);
   nonpreemptive   fftVect8 =
    merge ck (false -> fftVect8_false)(true -> fftVect8_true);
   nonpreemptive   fftVect16_false = Scan.scanVect16();
   nonpreemptive   result16_false = fft16((fftVect16 when false(ck)));
   nonpreemptive   fftVect8_false =
    [{ Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 }];
   nonpreemptive   result8_false =
    [{ Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 }];
   nonpreemptive   fftVect8_true = Scan.scanVect8();
   nonpreemptive   result8_true = fft8((fftVect8 when true(ck)));
   nonpreemptive   fftVect16_true =
    [{ Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 }];
   nonpreemptive   result16_true =
    [{ Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 },
      { Typecomplex.re = 0.000000; Typecomplex.im = 0.000000 }];
   nonpreemptive   ck = (n = 8)
tel

